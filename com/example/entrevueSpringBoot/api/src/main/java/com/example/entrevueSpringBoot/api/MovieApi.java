/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.entrevueSpringBoot.api;

import com.example.entrevueSpringBoot.model.MovieDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-12T16:57:50.640+01:00[Africa/Casablanca]")
@Validated
@Api(value = "movie", description = "the movie API")
public interface MovieApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /movie : Add a new Movie
     *
     * @param movie Movie to be added in database (required)
     * @return Movie Added (status code 200)
     */
    @ApiOperation(value = "Add a new Movie", nickname = "addMovie", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Movie Added", response = String.class) })
    @PostMapping(
        value = "/movie",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> _addMovie(@ApiParam(value = "Movie to be added in database" ,required=true )  @Valid @RequestBody MovieDto movie) {
        return addMovie(movie);
    }

    // Override this method
    default  ResponseEntity<String> addMovie(MovieDto movie) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /movie/{id} : Find pet by ID
     * Returns a single pet
     *
     * @param UNKNOWN_PARAMETER_NAME ID of pet to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Movie not found (status code 404)
     */
    @ApiOperation(value = "Find pet by ID", nickname = "getPetById", notes = "Returns a single pet", response = MovieDto.class, tags={ "movie", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = MovieDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Movie not found") })
    @GetMapping(
        value = "/movie/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<MovieDto> _getPetById(@ApiParam(value = "ID of pet to return",required=true) @PathVariable("id")  UNKNOWN_PARAMETER_NAME) {
        return getPetById(UNKNOWN_PARAMETER_NAME);
    }

    // Override this method
    default  ResponseEntity<MovieDto> getPetById( UNKNOWN_PARAMETER_NAME) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\" } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
